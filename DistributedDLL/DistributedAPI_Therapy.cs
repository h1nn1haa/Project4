using MathNet.Numerics.IntegralTransforms;

namespace DistributedDLL
{
    public partial class DistributedAPI
    {
        public static void Main()
        {
            double intercept = -4.329217463232012;

            double[] weights =
            {
                2.19163808521538e-05, 5.2234161579607355e-05, 9.584868627956187e-05,
                5.824844894286114e-05, 4.629542877666266e-05, 5.646522578345715e-05,
                0.00012539799100228123, 0.00010390218329056196, 5.660221871514453e-05,
                1.824878454629184e-05, 4.6392276945961145e-05, 3.482134273265125e-06,
                1.5493101133878713e-05, 5.822167401276938e-05, 3.960045372692045e-05,
                -3.9205810614620565e-06, -4.579774771399011e-05, -8.902809969773485e-05,
                -7.854458954804528e-05, 1.0915845417317823e-05, 1.3610078704171552e-05,
                1.644457229284514e-05, -1.67938301724548e-05, -1.6342392772526844e-07,
                -3.04721788859829e-05, 9.53735700852202e-05, 0.000245672527088678,
                0.00020551904558613375, 6.430583141653028e-05, 0.00011319613477075329,
                -2.0843481806203018e-05, 0.00010788123188951819, 2.8581504910916025e-05,
                0.0004997922596641427, 6.31595140233217e-05, 0.0001236763297748901,
                0.0005262716244413752, -4.941324087784573e-05, 0.0003903776927307232,
                0.0005649670299089966, -0.0002003754473961841, -0.00017142920751477182,
                -0.00022134204507561527, 0.00013502421845593777, -0.0006722364036177792,
                -0.0008435392980566357
            };

            double[] signal = new double[]
            {
                17.999267578125, 19.01922607421875, 38.9984130859375,
                40.01837158203125, 28.01885986328125, 2.9998779296875,
                -13.01947021484375, -16.97930908203125, -8.9996337890625,
                1.01995849609375, 4.97979736328125, 1.01995849609375,
                -4.97979736328125, -32.9986572265625, -32.9986572265625,
                -31.01873779296875, -29.998779296875, -17.999267578125,
                -16.97930908203125, -8.9996337890625, 13.01947021484375,
                2.9998779296875, -10.97955322265625, -46.97808837890625,
                -58.01763916015625, -34.01861572265625, 13.01947021484375,
                37.01849365234375, 55.01776123046875, 58.01763916015625,
                49.01800537109375, 59.99755859375, 79.01678466796875,
                77.996826171875, 58.01763916015625, 35.99853515625,
                2.9998779296875, -5.999755859375, -4.01983642578125,
                -2.9998779296875, 4.01983642578125, -20.9991455078125,
                -22.01910400390625, -16.01934814453125, -10.01959228515625,
                4.97979736328125, 10.01959228515625, 0.0,
                -14.9993896484375, -31.97869873046875, -25.97894287109375,
                -25.01898193359375, -35.99853515625, -61.01751708984375,
                -92.9962158203125, -103.01580810546876, -85.97650146484375,
                -62.9974365234375, -40.01837158203125, -7.01971435546875,
                8.9996337890625, 16.97930908203125, 23.9990234375,
                29.998779296875, 44.9981689453125, 34.97857666015625,
                16.01934814453125, 19.01922607421875, -17.999267578125,
                -46.01812744140625, -82.01666259765625, -94.01617431640624,
                -88.01641845703125, -71.9970703125, -49.97796630859375,
                -31.01873779296875, 7.97967529296875, 46.97808837890625,
                82.01666259765625, 76.01690673828125, 67.97723388671875,
                43.97821044921875, 20.9991455078125, 5.999755859375,
                -1.97991943359375, 8.9996337890625, -4.97979736328125,
                -13.97943115234375, -35.99853515625, -52.01788330078125,
                -56.9976806640625, -37.97845458984375, -7.01971435546875,
                31.97869873046875, 52.01788330078125, 43.97821044921875,
                14.9993896484375, 8.9996337890625, 14.9993896484375,
                25.97894287109375, 17.999267578125, 7.97967529296875,
                17.999267578125, 20.9991455078125, 40.97833251953125,
                53.997802734375, 64.01739501953125, 77.996826171875,
                88.97637939453125, 91.97625732421876, 103.01580810546876,
                79.97674560546875, 61.01751708984375, 17.999267578125,
                -19.01922607421875, -31.97869873046875, -40.01837158203125,
                -41.998291015625, -34.01861572265625, -22.01910400390625,
                16.97930908203125, 26.9989013671875, 49.01800537109375,
                35.99853515625, 17.999267578125, 1.01995849609375,
                4.01983642578125, -16.01934814453125, -17.999267578125,
                -26.9989013671875, -19.97918701171875, -11.99951171875,
                -4.97979736328125, 4.97979736328125, 8.9996337890625,
                8.9996337890625, 7.01971435546875, 13.97943115234375,
                2.9998779296875, 10.01959228515625, 13.01947021484375,
                7.01971435546875, 4.01983642578125, -20.9991455078125,
                -46.97808837890625, -74.9969482421875, -88.97637939453125,
                -100.97589111328124, -92.9962158203125, -83.99658203125,
                -64.01739501953125, -25.97894287109375, -7.97967529296875,
                16.97930908203125, 7.01971435546875, -1.97991943359375,
                -10.01959228515625, -7.97967529296875, -11.99951171875,
                -43.97821044921875, -67.01727294921875, -103.97576904296876,
                -127.01483154296876, -131.99462890625, -106.97564697265624,
                -61.01751708984375, -31.01873779296875, -7.97967529296875,
                -8.9996337890625, -16.01934814453125, -23.9990234375,
                -19.01922607421875, -28.97882080078125, -22.01910400390625,
                -10.01959228515625, 2.9998779296875, -8.9996337890625,
                -29.998779296875
            };

            Fourier.ForwardReal(signal, 178, FourierOptions.NoScaling);

            double sum = 0;

            for (int i = 0; i <= 45 * 2; i += 2)
            {
                double psd = Math.Sqrt(signal[i] * signal[i + 1] * signal[i + 1]);
                Console.WriteLine(psd);
                sum += weights[i / 2] * psd;
            }

            if ((sum + intercept) > 0)
            {
                Console.WriteLine("Seizure Positive");
            }
            else
            {
                Console.WriteLine("Seizure Negative");
            }
        }
        /*
        public void something()
        {
            int i = 0;

            while (this.IsConnected)
            {
                this._eegDataBuffer.CopyTo(real_buffer);
                Fourier.Forward(real_buffer, complex_buffer, FourierOptions.NoScaling);

                i = 0;

                foreach (double spectralPower in real_buffer.Zip(complex_buffer, (a, b) => a * a + b * b))
                {
                    psd[i++] = Math.Sqrt(spectralPower);
                }

                if (this._clf_lda.classify(psd))
                {
                    this.PerformTherapy();
                }
                else
                {
                    // no seizure
                }
            }
        }*/

        public void StartTherapy()
        {
            Packet req = new(PacketType.TRANSACTION, this._packetID, new byte[1] { (byte)OpCode.START_STIMULATION });
            Packet? response = this.SendPacket(req);

            if (response == null)
            {
                Console.WriteLine("Distributed Interface DLL - Start Therapy: Operation timed out.");
                return;
            }

            if (!req.bytes.SequenceEqual(response.bytes))
            {
                if (response.Payload[0] == (byte)ErrCode.BAD_CHECKSUM)
                {
                    Console.WriteLine("Distributed Interface DLL - Start Therapy: bad checksum received by Arduino");
                }
                else if (response.Payload[0] == (byte)ErrCode.PAYLOAD_LENGTH_EXCEEDS_MAX)
                {
                    Console.WriteLine("Distributed Interface DLL - Start Therapy: payload too large.");
                }

                return;
            }

            Console.WriteLine("Distributed Interface DLL - Therapy Started");
            return;
        }

        public void StopTherapy() 
        {
            Packet req = new(PacketType.TRANSACTION, this._packetID, new byte[1] { (byte)OpCode.STOP_STIMULATION });
            Packet? response = this.SendPacket(req);

            if (response == null)
            {
                Console.WriteLine("Distributed Interface DLL - Stop Therapy: Operation timed out.");
                return;
            }

            if (!req.bytes.SequenceEqual(response.bytes))
            {
                if (response.Payload[0] == (byte)ErrCode.BAD_CHECKSUM)
                {
                    Console.WriteLine("Distributed Interface DLL - Stop Therapy: bad checksum received by Arduino");
                }
                else if (response.Payload[0] == (byte)ErrCode.PAYLOAD_LENGTH_EXCEEDS_MAX)
                {
                    Console.WriteLine("Distributed Interface DLL - Stop Therapy: payload too large.");
                }

                return;
            }

            Console.WriteLine("Distributed Interface DLL - Therapy Stopped");
            return;
        }
    }
}
